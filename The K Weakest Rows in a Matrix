class Solution {
public:
        struct comparator{
        bool operator() (pair<int,int> &x, pair<int,int> &y){
            if(x.second == y.second){
                return x.first < y.first; 
            }
            return x.second < y.second;
        }
    };

    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
        unordered_map<int, int> m;
        for(int i=0;i<mat.size();i++){
            int c = 0; 
            for(int j=0;j<mat[i].size();j++){
                if(mat[i][j] == 1){
                    c++;
                }
                m[i] = c;

            }
        }
        priority_queue<pair<int, int>, vector<pair<int, int>>, comparator> maxHeap;
        for(auto i : m){
            maxHeap.push(i);
            if(maxHeap.size() > k){
                maxHeap.pop();
            }
        }
        vector<int> ans;
        while(!maxHeap.empty()){
            ans.push_back(maxHeap.top().first);
            maxHeap.pop();
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
};
