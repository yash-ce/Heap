class Solution {
public:
    struct comparator{
        bool operator() (pair<char, int> &x, pair<char, int> &y){
            return x.second < y.second;
        }
    };
    string reorganizeString(string s) {
        unordered_map<char, int> m;
        for(auto i:s){
            m[i]++;
        }
        
        priority_queue<pair<char, int>, vector<pair<char, int>>, comparator> maxHeap;
        for(auto pair : m){
            maxHeap.push(pair);
        }
        string ans = "";
        while(maxHeap.size() > 1){
            auto it1 = maxHeap.top();
            maxHeap.pop();
            auto it2 = maxHeap.top();
            maxHeap.pop();
            ans.push_back(it1.first);
            ans.push_back(it2.first);
            if(it1.second > 1){
                it1.second -= 1;
                maxHeap.push(it1);
            }
            if(it2.second > 1){
                it2.second -= 1;
                maxHeap.push(it2);
            }
        }
        if(maxHeap.size() == 0){
            return ans;
        }
        else if(maxHeap.size() == 1){
            auto it = maxHeap.top();
            maxHeap.pop();
            if(it.second == 1){
                ans.push_back(it.first);
                return ans;
            }
            else{
                return "";
            }
        }
        return "";
    }
};
