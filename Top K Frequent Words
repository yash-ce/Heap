class Solution {
public:
    struct comparator{
     bool operator()(pair<string, int> &a , pair<string, int> &b){
          return a.second > b.second || (a.second == b.second && a.first < b.first);
         // return x.second > y.second;
        }
    };
    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string, int> m;
        for(int i=0;i<words.size();i++){
            m[words[i]]++;
        }
        
        priority_queue<pair<string, int>, vector<pair<string, int>>, comparator> minHeap;
        for(auto pair: m){
            minHeap.push(pair);
            if(minHeap.size() > k){
                minHeap.pop();
            }
        }
        vector<string> v;
        int i=0;
        while(!minHeap.empty()){
            v.push_back(minHeap.top().first);
            minHeap.pop();
            // i++;
        }
        reverse(v.begin(), v.end());
        return v;
    }
};
